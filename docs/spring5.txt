Spring initializer- http://start.spring.io/

Run application from command line with maven
C:\git\repo\udemy\spring\spring5\spring5webapp>mvnw.cmd spring-boot:run

Jps(Java persistence api- official api for workign with relational dbs
-only a specification and not a concrete implementation
-Is a bridge from java object to how data is stored in dbs
orm- object relational mapping
-one api will support many relational dbs

H2 database startup
http://localhost:8080/h2-console/login.jsp?jsessionid=5da92969c736f315a87146d8eea87658
jdbc:h2:mem:testdb

github videos
https://www.youtube.com/watch?v=w3jLJU7DT5E

https://www.youtube.com/watch?v=HwrPhOp6-aM&list=PL0lo9MOBetEHhfG9vJzVCTiDYcbhAiEqL

Spring Data Repositories
 • Provides an Implementation of the Repository Pattern
 • Concept is originally from Eric Evans’ book Domain Driven Design 
 • A Repository has methods for retrieving domain objects should delegate to a specialized Repository object such that alternative storage implementations may be interchanged.
 • This is important. It allows you to easily substitute the persistence layer. • i.e. going from SQL to NoSQ
 
 Dependency injection-
 
 ApplicationContext- Does all the work loads all the dependencies and beans
 
 Dependency injection-
 Constructor based- which is preferred
 -property based-
 -getter setter based-
All must get annotations @controller and @autowired or it can results in nullpointers

Qaulifiers- if there are multiple implementations of the interface you would use qualifiers to tell spring which bean you want
@Qualifier("constructorGreetingService")- the string is the bean name

PrimaryBeans- multiple beans of the same type and you want to use one by default

Spring profiles-Configures spring at runtime on how it wires up things
-exmaple  profile with differnt data sources
use @Profile("es")
set up application.props
spring.profiles.active=en

default profile
if noting is specified in application.props then you can set it a default so nothing fails
@Profile({"en","default"})

Spring bean lifecycle

Spring Configuration options
Xml configuration- older projects, @ImportResource("classpath:chucknorrisconfig.xml")
-Java configuration- used in new projects
Annontations configuration-
component - @ComponentScan(basePackages = {"com.avs.didemo.services"})  === scans all packages and below done in spring main class

Usefactory beans to make db connections

Spring environment properties- can you to get env variables across platforms. Dev qa prod

https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html

Spring boot profile properties

JPA Entity relationships-

ONE to ONE- One entity is related to the other @OneToOne

ONE TO Many- one entity is realted to many entities(List,Set,Map,SortedSet, SorteMap)- @OneToMany

MAny to one- @ManyToOne- inverse relations of one to Many-

Many to Many @ManyToMany- Many entities are related to many entities
Eash has a list or set ference to the other
A join table is used to define the relation ship

https://help.github.com/articles/fork-a-repo/

https://help.github.com/articles/syncing-a-fork/

https://circleci.com/?utm_source=gb&utm_medium=SEM&utm_campaign=SEM-gb-300-Eng-ni&utm_content=SEM-gb-300-Eng-ni-Circle-CI-PricingLP&gclid=CjwKCAiAmvjRBRBlEiwAWFc1mNPP3KG3YjFkF0E9ExMqSGIyBWqiwqRPDWh8a5zp7XXht9bqBRHO2xoC_uoQAvD_BwE

https://www.webjars.org/

docker run mongo db an expose port command
docker run -p27017:27017 -d mongo